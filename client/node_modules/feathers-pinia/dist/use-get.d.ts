import type { Params } from './types';
import type { GetFn, GetClassParamsStandalone, GetClassParams } from './service-store/types';
import type { MaybeRef } from './utility-types';
import type { Id } from '@feathersjs/feathers';
import { ComputedRef, Ref } from 'vue-demi';
import { BaseModel } from './service-store/base-model';
export declare function useGet<M extends BaseModel>(id: Id, params: MaybeRef<GetClassParamsStandalone<M>>): Get<M>;
export declare class Get<M extends BaseModel> {
    id: Ref<Id | null>;
    params: Ref<GetClassParams>;
    isSsr: ComputedRef<boolean>;
    data: ComputedRef<M | null>;
    ids: Ref<Id[]>;
    getFromStore: (id: Id | null, params: Params) => M | undefined;
    get: GetFn<M>;
    request: Ref<Promise<M | undefined>>;
    requestCount: Ref<number>;
    queryWhen: (queryWhenFn: () => boolean) => void;
    isPending: Ref<boolean>;
    hasBeenRequested: Ref<boolean>;
    hasLoaded: Ref<boolean>;
    error: ComputedRef<any>;
    clearError: () => void;
    constructor(_id: MaybeRef<Id | null>, _params: MaybeRef<GetClassParamsStandalone<M>>);
}
