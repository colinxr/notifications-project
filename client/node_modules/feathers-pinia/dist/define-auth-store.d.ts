import { StateTree, StoreDefinition, _GettersTree } from 'pinia';
import { DefineStoreOptionsWithDefaults } from './types';
declare type DefineAuthStoreOptions<Id extends string, S extends StateTree, G, A> = DefineStoreOptionsWithDefaults<Id, S, G, A, AuthStoreDefaultState, AuthStoreDefaultGetters, AuthStoreDefaultActions> & {
    feathersClient: any;
    id?: string;
};
declare type AuthStoreDefinition<Id extends string, S, G, A> = StoreDefinition<Id, AuthStoreDefaultState & S, AuthStoreDefaultGetters & G, AuthStoreDefaultActions & A>;
interface AuthStoreDefaultState {
    isLoading: boolean;
    isAuthenticated: boolean;
    accessToken: string | null;
    payload: any;
    error: any;
}
interface AuthStoreDefaultGetters extends _GettersTree<AuthStoreDefaultState> {
    feathersClient: () => any;
}
interface AuthStoreDefaultActions {
    authenticate: (authData: any) => Promise<any>;
    handleResponse: (response: any) => any;
    handleError: (err: Error) => any;
    setLoaded: (val: boolean) => void;
}
export declare function defineAuthStore<Id extends string, S extends StateTree = {}, G extends _GettersTree<S> = {}, A = {}>(...args: [DefineAuthStoreOptions<Id, S, G, A>] | [Id, Omit<DefineAuthStoreOptions<Id, S, G, A>, 'id'>]): AuthStoreDefinition<Id, S, G, A>;
export {};
