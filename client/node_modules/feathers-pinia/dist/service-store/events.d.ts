import { DefineFeathersStoreOptions, ServiceStore, ModelStatic } from './types';
import { BaseModel } from '.';
import { StateTree, _GettersTree } from 'pinia';
export interface ServiceEventsDebouncedQueue {
    addOrUpdateById: any;
    removeItemById: any;
    enqueueAddOrUpdate(item: any): void;
    enqueueRemoval(item: any): void;
    flushAddOrUpdateQueue(): void;
    flushRemoveItemQueue(): void;
}
interface EnableServiceEventsOptions<Id extends string = string, M extends BaseModel = BaseModel, S extends StateTree = {}, G extends _GettersTree<S> = {}, A = {}> {
    service: any;
    Model: ModelStatic<M>;
    store: ServiceStore<Id, M, S, G, A>;
    options: EnableServiceEventsOptionsOptions<Id, M, S, G, A>;
}
declare type EnableServiceEventsOptionsOptions<Id extends string = string, M extends BaseModel = BaseModel, S extends StateTree = {}, G extends _GettersTree<S> = {}, A = {}> = Required<Pick<DefineFeathersStoreOptions<Id, M, S, G, A>, 'idField' | 'handleEvents' | 'debounceEventsGuarantee' | 'debounceEventsTime'>>;
export declare function enableServiceEvents<Id extends string = string, M extends BaseModel = BaseModel, S extends StateTree = {}, G extends _GettersTree<S> = {}, A = {}>({ service, Model, store, options }: EnableServiceEventsOptions<Id, M, S, G, A>): ServiceEventsDebouncedQueue;
export {};
