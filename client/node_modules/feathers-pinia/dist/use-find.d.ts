import type { Paginated, Params, QueryInfo } from './types';
import type { FindFn, FindClassParamsStandalone, FindClassParams, CurrentQuery } from './service-store/types';
import type { MaybeRef } from './utility-types';
import { ComputedRef, Ref, WritableComputedRef } from 'vue-demi';
import { BaseModel } from './service-store/base-model';
export declare function useFind<M extends BaseModel>(params: MaybeRef<FindClassParamsStandalone<M>>): Find<M>;
export declare class Find<M extends BaseModel> {
    params: Ref<FindClassParams>;
    onServer: boolean;
    isSsr: ComputedRef<boolean>;
    qid: WritableComputedRef<string>;
    data: ComputedRef<M[]>;
    allData: ComputedRef<M[]>;
    total: ComputedRef<number>;
    limit: Ref<number>;
    skip: Ref<number>;
    findInStore: (params: Params) => Paginated<M>;
    currentQuery: ComputedRef<CurrentQuery<M> | null>;
    latestQuery: ComputedRef<QueryInfo | null>;
    previousQuery: ComputedRef<QueryInfo | null>;
    find: FindFn<M>;
    request: Ref<Promise<Paginated<M>>>;
    requestCount: Ref<number>;
    queryWhen: (queryWhenFn: () => boolean) => void;
    isPending: ComputedRef<boolean>;
    haveBeenRequested: ComputedRef<boolean>;
    haveLoaded: ComputedRef<boolean>;
    error: ComputedRef<any>;
    clearError: () => void;
    pageCount: Ref<number>;
    currentPage: Ref<number>;
    canPrev: ComputedRef<boolean>;
    canNext: ComputedRef<boolean>;
    next: () => Promise<void>;
    prev: () => Promise<void>;
    toStart: () => Promise<void>;
    toEnd: () => Promise<void>;
    toPage: (page: number) => Promise<void>;
    constructor(_params: MaybeRef<FindClassParamsStandalone<M>>);
}
